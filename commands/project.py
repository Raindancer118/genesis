import subprocess
from pathlib import Path

from rich.console import Console
from rich.panel import Panel
from rich.text import Text

import questionary

console = Console()


def _init_git_repo(path: Path, use_git: bool) -> None:
    """Initialise a Git repository when requested, handling failures gracefully."""
    if not use_git:
        return

    try:
        subprocess.run(
            ["git", "init"],
            cwd=path,
            check=True,
            capture_output=True,
            text=True,
        )
        console.print("  ✅ [green]Initialised Git repository[/green]")
    except (FileNotFoundError, subprocess.CalledProcessError) as exc:
        error_msg = getattr(exc, "stderr", "") or getattr(exc, "output", "") or str(exc)
        console.print(
            "  ⚠️ [yellow]Git repository could not be initialised:"
            f" {error_msg.strip() if isinstance(error_msg, str) else error_msg}[/yellow]"
        )


def _create_python_scaffold(path, use_git):
    """Creates the files and folders for a simple Python project."""
    (path / "src").mkdir()
    (path / "src" / "main.py").write_text(
        "def main():\n    print(\"Hello, World!\")\n\nif __name__ == \"__main__\":\n    main()\n")
    (path / "tests").mkdir()
    (path / "tests" / "test_main.py").touch()
    (path / ".gitignore").write_text("# Python standard\n__pycache__/\n*.pyc\n.env\n/venv/\n")
    (path / "README.md").write_text(f"# {path.name}\n\nA new Python project created by Genesis.")
    _init_git_repo(path, use_git)
    console.print(f"  ✅ [green]Created basic Python structure in '{path.name}'[/green]")


def _create_python_package_scaffold(path, use_git):
    """Creates the files and folders for a distributable Python package."""
    package_dir = path / path.name.replace("-", "_")
    package_dir.mkdir()
    (package_dir / "__init__.py").write_text("__all__ = []\n")
    (package_dir / "cli.py").write_text(
        "\n".join(
            [
                '"""Entry point for the package."""',
                "",
                "",
                "def main() -> None:",
                f'    print("Hello from {path.name}!")',
                "",
            ]
        )
    )
    (path / "tests").mkdir()
    (path / "tests" / "test_cli.py").write_text(
        "\n".join(
            [
                '"""Basic smoke test for the CLI."""',
                "",
                "",
                "def test_import():",
                f'    import {package_dir.name}',
                "",
            ]
        )
    )
    (path / "pyproject.toml").write_text(
        "\n".join(
            [
                "[build-system]",
                'requires = ["setuptools"]',
                'build-backend = "setuptools.build_meta"',
                "",
                "[project]",
                f'name = "{path.name}"',
                'version = "0.1.0"',
                'description = "A Python package created by Genesis."',
                'readme = "README.md"',
                'requires-python = ">=3.8"',
                'authors = [{ name = "Genesis User", email = "user@example.com" }]',
                'dependencies = []',
                "",
                "[project.scripts]",
                f"{path.name.replace('-', '_')} = \"{package_dir.name}.cli:main\"",
                "",
            ]
        )
    )
    (path / "README.md").write_text(f"# {path.name}\n\nPython package scaffold created by Genesis.")
    (path / ".gitignore").write_text("dist/\nbuild/\n*.egg-info/\n__pycache__/\n*.pyc\n")
    _init_git_repo(path, use_git)
    console.print(f"  ✅ [green]Created Python package structure in '{path.name}'[/green]")


def _create_node_scaffold(path, use_git):
    """Creates a minimal Node.js application scaffold."""
    (path / "src").mkdir()
    (path / "src" / "index.js").write_text(
        "#!/usr/bin/env node\n"
        "function main() {\n"
        "  console.log('Hello from {name}!');\n"
        "}\n\n"
        "if (require.main === module) {\n"
        "  main();\n"
        "}\n".format(name=path.name)
    )
    (path / "package.json").write_text(
        '{\n'
        f'  "name": "{path.name}",\n'
        '  "version": "0.1.0",\n'
        '  "description": "A Node.js project generated by Genesis",\n'
        '  "type": "module",\n'
        '  "main": "src/index.js",\n'
        f'  "bin": {{ "{path.name}": "src/index.js" }},\n'
        '  "scripts": {\n'
        '    "start": "node src/index.js",\n'
        '    "test": "echo \\\"Error: no test specified\\\" && exit 1"\n'
        '  }\n'
        '}\n'
    )
    (path / "README.md").write_text(f"# {path.name}\n\nA Node.js project scaffold generated by Genesis.")
    (path / ".gitignore").write_text("node_modules/\n.DS_Store\n.env\n")
    _init_git_repo(path, use_git)
    console.print(f"  ✅ [green]Created Node.js project in '{path.name}'[/green]")


def _create_go_scaffold(path, use_git):
    """Creates a minimal Go command-line project."""
    module_name = path.name.replace("-", "_")
    (path / "cmd" / module_name).mkdir(parents=True)
    (path / "cmd" / module_name / "main.go").write_text(
        "package main\n\n"
        "import \"fmt\"\n\n"
        "func main() {\n"
        "    fmt.Println(\"Hello from {name}!\")\n"
        "}\n".format(name=path.name)
    )
    (path / "go.mod").write_text(f"module {module_name}\n\ngo 1.20\n")
    (path / "README.md").write_text(f"# {path.name}\n\nA Go CLI application scaffold generated by Genesis.")
    (path / ".gitignore").write_text("bin/\n*.exe\n*.test\n")
    _init_git_repo(path, use_git)
    console.print(f"  ✅ [green]Created Go CLI project in '{path.name}'[/green]")


def _create_rust_scaffold(path, use_git):
    """Creates a minimal Rust binary crate."""
    (path / "src").mkdir()
    (path / "src" / "main.rs").write_text(
        "fn main() {\n    println!(\"Hello from {name}!\");\n}\n".format(name=path.name)
    )
    (path / "Cargo.toml").write_text(
        "[package]\n"
        f"name = \"{path.name.replace('-', '_')}\"\n"
        "version = \"0.1.0\"\n"
        "edition = \"2021\"\n\n"
        "[dependencies]\n"
    )
    (path / "README.md").write_text(f"# {path.name}\n\nA Rust project scaffold generated by Genesis.")
    (path / ".gitignore").write_text("/target\nCargo.lock\n")
    _init_git_repo(path, use_git)
    console.print(f"  ✅ [green]Created Rust project in '{path.name}'[/green]")


def _create_java_scaffold(path, use_git):
    """Creates a minimal Java project with a simple entry point."""
    src_dir = path / "src"
    src_dir.mkdir()
    (src_dir / "Main.java").write_text(
        "public class Main {\n"
        "    public static void main(String[] args) {\n"
        "        System.out.println(\"Hello from {name}!\");\n"
        "    }\n"
        "}\n".format(name=path.name)
    )
    (path / "README.md").write_text(
        f"# {path.name}\n\nA simple Java project scaffold generated by Genesis."
    )
    (path / ".gitignore").write_text(
        "bin/\n"
        "out/\n"
        "*.class\n"
        "*.log\n"
        ".idea/\n"
        ".vscode/\n"
    )
    _init_git_repo(path, use_git)
    console.print(f"  ✅ [green]Created Java project in '{path.name}'[/green]")


def _create_maven_scaffold(path, use_git):
    """Creates a Maven-based Java project structure."""
    group_id = "com.example"
    artifact_id = path.name.lower().replace(" ", "-")
    base_package = group_id.replace(".", "/")

    main_dir = path / "src" / "main" / "java" / base_package
    test_dir = path / "src" / "test" / "java" / base_package
    main_dir.mkdir(parents=True)
    test_dir.mkdir(parents=True)

    (main_dir / "App.java").write_text(
        "package {group};\n\n"
        "public class App {{\n"
        "    public static void main(String[] args) {{\n"
        "        System.out.println(\"Hello from {name}!\");\n"
        "    }}\n"
        "}}\n".format(group=group_id, name=path.name)
    )

    (test_dir / "AppTest.java").write_text(
        "package {group};\n\n"
        "import org.junit.jupiter.api.Test;\n"
        "import static org.junit.jupiter.api.Assertions.assertTrue;\n\n"
        "class AppTest {{\n"
        "    @Test\n"
        "    void appHasAGreeting() {{\n"
        "        assertTrue(true);\n"
        "    }}\n"
        "}}\n".format(group=group_id)
    )

    (path / "pom.xml").write_text(
        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
        "<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
        "         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
        "         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n"
        "                             http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n"
        "    <modelVersion>4.0.0</modelVersion>\n"
        f"    <groupId>{group_id}</groupId>\n"
        f"    <artifactId>{artifact_id}</artifactId>\n"
        "    <version>0.1.0</version>\n"
        "    <properties>\n"
        "        <maven.compiler.source>17</maven.compiler.source>\n"
        "        <maven.compiler.target>17</maven.compiler.target>\n"
        "    </properties>\n"
        "    <dependencies>\n"
        "        <dependency>\n"
        "            <groupId>org.junit.jupiter</groupId>\n"
        "            <artifactId>junit-jupiter</artifactId>\n"
        "            <version>5.10.2</version>\n"
        "            <scope>test</scope>\n"
        "        </dependency>\n"
        "    </dependencies>\n"
        "    <build>\n"
        "        <plugins>\n"
        "            <plugin>\n"
        "                <groupId>org.apache.maven.plugins</groupId>\n"
        "                <artifactId>maven-surefire-plugin</artifactId>\n"
        "                <version>3.2.5</version>\n"
        "                <configuration>\n"
        "                    <useModulePath>false</useModulePath>\n"
        "                </configuration>\n"
        "            </plugin>\n"
        "        </plugins>\n"
        "    </build>\n"
        "</project>\n"
    )

    (path / "README.md").write_text(
        "# {name}\n\n"
        "A Maven-based Java project scaffold generated by Genesis.\n"
        "\n"
        "## Getting Started\n"
        "```bash\n"
        "mvn test\n"
        "mvn package\n"
        "java -jar target/{artifact}-0.1.0.jar\n"
        "```\n".format(name=path.name, artifact=artifact_id)
    )

    (path / ".gitignore").write_text(
        "target/\n"
        "*.iml\n"
        ".idea/\n"
        ".vscode/\n"
        "*.log\n"
    )

    _init_git_repo(path, use_git)
    console.print(f"  ✅ [green]Created Maven project in '{path.name}'[/green]")


TEMPLATES = {
    "Python (Simple)": _create_python_scaffold,
    "Python (Package)": _create_python_package_scaffold,
    "Node.js (Basic)": _create_node_scaffold,
    "Go (CLI)": _create_go_scaffold,
    "Rust (CLI)": _create_rust_scaffold,
    "Java (Basic)": _create_java_scaffold,
    "Java (Maven)": _create_maven_scaffold,
    "Empty Project": None,
}


def get_template_choices():
    """Return the available template names."""
    return list(TEMPLATES.keys())


def run_project_wizard():
    """Backwards compatible wrapper for the interactive project creator."""
    create_project()


def create_project(name=None, template_key=None, use_git=None, auto_confirm=False):
    """Create a new project, optionally using provided parameters instead of prompts."""
    console.print(Panel.fit("[bold cyan]🚀 Genesis Project Builder[/bold cyan]", border_style="cyan"))

    project_name = name
    if project_name:
        if Path(project_name).exists():
            console.print(f"[red]A project or directory named '{project_name}' already exists.[/red]")
            return
    else:
        project_name = questionary.text(
            "What is the name of your project?",
            validate=lambda text: True if len(text) > 0 and not Path(text).exists()
            else "Name cannot be empty or already exist."
        ).ask()
        if not project_name:
            console.print("[red]Cancelled.[/red]")
            return

    template_choice = template_key
    if template_choice:
        if template_choice not in TEMPLATES:
            console.print(
                f"[red]Unknown template '{template_choice}'. Available options: {', '.join(TEMPLATES)}[/red]"
            )
            return
    else:
        template_choice = questionary.select(
            "Choose a project template:",
            choices=get_template_choices()
        ).ask()
        if not template_choice:
            console.print("[red]Cancelled.[/red]")
            return

    if use_git is None:
        use_git = questionary.confirm("Initialize a Git repository?", default=True).ask()
        if use_git is None:
            console.print("[red]Cancelled.[/red]")
            return

    summary = Text.assemble(
        ("Project Name: ", "bold"), (f"{project_name}\n"),
        ("Template:     ", "bold"), (f"{template_choice}\n"),
        ("Use Git:      ", "bold"), ("Yes" if use_git else "No")
    )
    console.print(Panel(summary, title="[yellow]Summary[/yellow]", expand=False))

    proceed = auto_confirm or questionary.confirm("Proceed with creation?").ask()
    if not proceed:
        console.print("[red]Cancelled.[/red]")
        return

    console.print("\n[bold]Building project...[/bold]")
    project_path = Path(project_name)
    try:
        project_path.mkdir()
    except FileExistsError:
        console.print(f"[red]A directory named '{project_name}' already exists.[/red]")
        return

    scaffold_function = TEMPLATES[template_choice]
    if scaffold_function:
        scaffold_function(project_path, use_git)
    else:
        console.print(f"  ✅ [green]Created empty directory '{project_name}'[/green]")

    console.print(f"\n[bold green]🎉 Project '{project_name}' created successfully![/bold green]")


def build_from_template(project_name, template_string):
    """Build a project structure from an indented text template."""
    if not template_string:
        console.print("[red]No template provided. Nothing to build.[/red]")
        return

    project_path = Path(project_name)
    try:
        project_path.mkdir()
    except FileExistsError:
        console.print(f"[red]A directory named '{project_name}' already exists.[/red]")
        return

    stack = [project_path]
    for line_number, raw_line in enumerate(template_string.splitlines(), start=1):
        stripped = raw_line.strip()
        if not stripped or stripped.startswith('#'):
            continue

        indent = len(raw_line) - len(raw_line.lstrip(' '))
        if indent % 4 != 0:
            console.print(
                f"[red]Invalid indentation on line {line_number}: '{raw_line.strip()}'. Use multiples of four spaces.[/red]"
            )
            continue

        depth = indent // 4
        if depth >= len(stack):
            console.print(
                f"[red]Line {line_number} is indented too deeply without a parent directory: '{raw_line.strip()}'[/red]"
            )
            continue

        while len(stack) > depth + 1:
            stack.pop()

        parent = stack[depth]
        if stripped.endswith('/'):
            directory_name = stripped.rstrip('/').strip()
            target = parent / directory_name
            target.mkdir(exist_ok=True)
            stack.append(target)
        else:
            file_path = parent / stripped
            file_path.parent.mkdir(parents=True, exist_ok=True)
            if not file_path.exists():
                file_path.touch()

    console.print(f"\n[bold green]📁 Built template structure in '{project_name}'.[/bold green]")
